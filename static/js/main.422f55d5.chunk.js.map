{"version":3,"sources":["components/List.jsx","components/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["List","props","username","userlastname","profilepic","onContactClick","index","className","onClick","e","src","alt","Profile","style","backgroundImage","profileImage","firstName","lastName","email","phone","address","city","country","EnhancedList","activePage","onBackClick","App","setState","activeIndex","undefined","state","users","fetch","then","response","json","catch","console","log","this","map","user","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAkBeA,MAhBf,SAAcC,GAAQ,IACZC,EAA8DD,EAA9DC,SAAUC,EAAoDF,EAApDE,aAAcC,EAAsCH,EAAtCG,WAAYC,EAA0BJ,EAA1BI,eAAgBC,EAAUL,EAAVK,MAC5D,OACE,wBAAIC,UAAU,WAAWC,QAAS,SAAAC,GAAC,OAAIJ,EAAeC,KACpD,yBACEC,UAAU,aACVG,IAAKN,EACLO,IAAK,iBAAmBT,IAE1B,0BAAMK,UAAU,YACbL,EADH,IACcC,KCsBLS,MAhCf,SAAiBX,GAAQ,IACfK,EAAUL,EAAVK,MACR,OACE,yBAAKC,UAAU,kBACb,yBACEA,UAAU,MACVM,MAAO,CAAEC,gBAAgB,OAAD,OAASR,EAAMS,aAAf,QAG1B,yBACER,UAAU,eACVG,IAAKJ,EAAMS,aACXJ,IAAK,iBAAmBL,EAAMU,YAGhC,yBAAKT,UAAU,QACb,8BACGD,EAAMU,UADT,IACqBV,EAAMW,UAE3B,6BACA,wCAAcX,EAAMY,OACpB,6BACA,wCAAcZ,EAAMa,OACpB,6BACA,0CACYb,EAAMc,QAAQC,KAD1B,KACkCf,EAAMc,QAAQE,YCRxD,IAAMC,EAdG,SAAStB,GACd,OACE,yBAAKM,UAAU,UACZN,EAAMuB,WACL,GAEA,4BAAQhB,QAASP,EAAMwB,aAAvB,QAEF,wCAqEOC,E,YA5Db,aAAe,IAAD,8BACZ,+CAmBFrB,eAAiB,SAAAC,GACf,EAAKqB,SAAS,CACZH,YAAY,EACZI,YAAatB,KAvBH,EA2BdmB,YAAc,WACZ,EAAKE,SAAS,CACZH,YAAY,EACZI,iBAAaC,KA3Bf,EAAKC,MAAQ,CACXC,MAAO,GACPP,YAAY,GALF,E,iFASO,IAAD,OAClBQ,MAAM,uCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OACZ,EAAKP,SAAS,CACZI,MAAOG,OAGVE,OAAM,SAAA3B,GAAC,OAAI4B,QAAQC,IAAI7B,Q,+BAiBlB,IAAD,OACP,OACE,yBAAKF,UAAU,OACb,kBAACgB,EAAD,CACEC,WAAYe,KAAKT,MAAMN,WACvBC,YAAac,KAAKd,cAEnBc,KAAKT,MAAMN,WACVe,KAAKT,MAAMC,MAAMS,KAAI,SAACC,EAAMnC,GAAP,OACnB,kBAAC,EAAD,CACED,eAAgB,EAAKA,eACrBC,MAAOA,EACPoC,IAAKpC,EACLJ,SAAUuC,EAAKzB,UACfb,aAAcsC,EAAKxB,SACnBb,WAAYqC,EAAK1B,kBAIrB,kBAAC,EAAD,CAAST,MAAOiC,KAAKT,MAAMC,MAAMQ,KAAKT,MAAMF,oB,GAtDpCe,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.422f55d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction List(props) {\r\n  const { username, userlastname, profilepic, onContactClick, index } = props;\r\n  return (\r\n    <li className=\"userList\" onClick={e => onContactClick(index)}>\r\n      <img\r\n        className=\"profilePic\"\r\n        src={profilepic}\r\n        alt={\"Profile pic of\" + username}\r\n      />\r\n      <span className=\"userName\">\r\n        {username} {userlastname}\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nfunction Profile(props) {\r\n  const { index } = props;\r\n  return (\r\n    <div className=\"profileDetails\">\r\n      <div\r\n        className=\"bcg\"\r\n        style={{ backgroundImage: `url(${index.profileImage})` }}\r\n      ></div>\r\n\r\n      <img\r\n        className=\"profileImage\"\r\n        src={index.profileImage}\r\n        alt={\"Profile pic of\" + index.firstName}\r\n      />\r\n\r\n      <div className=\"info\">\r\n        <span>\r\n          {index.firstName} {index.lastName}\r\n        </span>\r\n        <br />\r\n        <span>Email: {index.email}</span>\r\n        <br />\r\n        <span>Phone: {index.phone}</span>\r\n        <br />\r\n        <span>\r\n          Address: {index.address.city}, {index.address.country}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\nimport List from \"./components/List\";\nimport Profile from \"./components/Profile\";\n\nfunction withHeader(Component) {\n  return function(props) {\n    return (\n      <div className=\"header\">\n        {props.activePage ? (\n          \"\"\n        ) : (\n          <button onClick={props.onBackClick}>Back</button>\n        )}\n        <h1>People</h1>\n      </div>\n    );\n  };\n}\n\nconst EnhancedList = withHeader();\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      users: [],\n      activePage: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://mock-io.herokuapp.com/users\")\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          users: response\n        })\n      )\n      .catch(e => console.log(e));\n  }\n\n  onContactClick = index => {\n    this.setState({\n      activePage: false,\n      activeIndex: index\n    });\n  };\n\n  onBackClick = () => {\n    this.setState({\n      activePage: true,\n      activeIndex: undefined\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <EnhancedList\n          activePage={this.state.activePage}\n          onBackClick={this.onBackClick}\n        />\n        {this.state.activePage ? (\n          this.state.users.map((user, index) => (\n            <List\n              onContactClick={this.onContactClick}\n              index={index}\n              key={index}\n              username={user.firstName}\n              userlastname={user.lastName}\n              profilepic={user.profileImage}\n            />\n          ))\n        ) : (\n          <Profile index={this.state.users[this.state.activeIndex]} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}